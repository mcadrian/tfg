/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.Engine;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import javax.swing.ButtonGroup;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 * Ventana secundaria que se abre cuando cargamos un fichero. Tendra las mismas
 * opciones que la primaria pero aqui si que podemos pulsar los botones para
 * mostrar informacion.
 *
 * @author ALADTO
 */
@SuppressWarnings("serial")
public class SecondWindow extends javax.swing.JFrame {

	/**
	 * Creates new form PantallaInicial
	 *
	 * @param idioma Un entero que representa el idioma de la vista. 0=ingles,
	 * 1=español
	 */
	public SecondWindow(int idioma) {
		initComponents();
		inicializarComponentes();
		if (idioma == 0) {
			jRadioButtonMenuItemEnglish.setSelected(true);
		} else if (idioma == 1) {
			jRadioButtonMenuItemEspañol.setSelected(true);
		}
		establecerIdioma();
		disableComponentFocus();
		createEventDispacher();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */                     
	private void initComponents() {

		panelDiagnostico = new javax.swing.JPanel();
		contenidoInfo = new javax.swing.JScrollPane();
		textoInfo = new javax.swing.JTextArea();
		tituloInformation = new javax.swing.JLabel();
		tituloTotalCiclos = new javax.swing.JLabel();
		textoTotalCiclos = new javax.swing.JTextField();
		tituloHeartRate = new javax.swing.JLabel();
		textoHeartRate = new javax.swing.JTextField();
		jLabelVersion = new javax.swing.JLabel();
		panelOpciones = new javax.swing.JPanel();
		tituloOpciones = new javax.swing.JLabel();
		showFactsButton = new javax.swing.JButton();
		botonRun = new javax.swing.JButton();
		showRulesButton = new javax.swing.JButton();
		ShowAgendaButton = new javax.swing.JButton();
		jButtonLoad = new javax.swing.JButton();
		separador = new javax.swing.JSeparator();
		barraMenu = new javax.swing.JMenuBar();
		menuFile = new javax.swing.JMenu();
		menuLoadFile = new javax.swing.JMenuItem();
		menuRun = new javax.swing.JMenuItem();
		separadorLoadExit = new javax.swing.JPopupMenu.Separator();
		menuExit = new javax.swing.JMenuItem();
		menuOther = new javax.swing.JMenu();
		jMenuLanguage = new javax.swing.JMenu();
		jRadioButtonMenuItemEnglish = new javax.swing.JRadioButtonMenuItem();
		jRadioButtonMenuItemEspañol = new javax.swing.JRadioButtonMenuItem();
		menuHelp = new javax.swing.JMenuItem();
		menuAbout = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("ECG Analyzer");
		setResizable(false);

		panelDiagnostico.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		textoInfo.setEditable(false);
		textoInfo.setColumns(20);
		textoInfo.setRows(5);
		contenidoInfo.setViewportView(textoInfo);

		tituloInformation.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		tituloInformation.setText("ECG Information");

		tituloTotalCiclos.setText("Total Cycles");

		textoTotalCiclos.setEditable(false);

		tituloHeartRate.setText("Heart Rate");

		textoHeartRate.setEditable(false);

		jLabelVersion.setText("Version 1.0");

		javax.swing.GroupLayout panelDiagnosticoLayout = new javax.swing.GroupLayout(panelDiagnostico);
		panelDiagnostico.setLayout(panelDiagnosticoLayout);
		panelDiagnosticoLayout.setHorizontalGroup(
				panelDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelDiagnosticoLayout.createSequentialGroup()
						.addGap(28, 28, 28)
						.addComponent(contenidoInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(23, 23, 23)
						.addGroup(panelDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDiagnosticoLayout.createSequentialGroup()
										.addGap(0, 0, Short.MAX_VALUE)
										.addComponent(jLabelVersion))
										.addGroup(panelDiagnosticoLayout.createSequentialGroup()
												.addGroup(panelDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
														.addComponent(tituloHeartRate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.addComponent(textoHeartRate, javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(textoTotalCiclos, javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(tituloTotalCiclos, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
														.addGap(0, 37, Short.MAX_VALUE)))
														.addContainerGap())
														.addGroup(panelDiagnosticoLayout.createSequentialGroup()
																.addGap(208, 208, 208)
																.addComponent(tituloInformation)
																.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		panelDiagnosticoLayout.setVerticalGroup(
				panelDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelDiagnosticoLayout.createSequentialGroup()
						.addGroup(panelDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(panelDiagnosticoLayout.createSequentialGroup()
										.addGap(92, 92, 92)
										.addComponent(tituloTotalCiclos)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(textoTotalCiclos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(tituloHeartRate)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(textoHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(panelDiagnosticoLayout.createSequentialGroup()
												.addGap(29, 29, 29)
												.addComponent(tituloInformation)
												.addGap(18, 18, 18)
												.addComponent(contenidoInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(jLabelVersion)
												.addContainerGap())
				);

		panelOpciones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		tituloOpciones.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		tituloOpciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		tituloOpciones.setText("Options");

		showFactsButton.setText("Show Facts");
		showFactsButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showFactsButtonActionPerformed(evt);
			}
		});

		botonRun.setText("Run");
		botonRun.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				botonRunActionPerformed(evt);
			}
		});

		showRulesButton.setText("Show Rules");
		showRulesButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showRulesButtonActionPerformed(evt);
			}
		});

		ShowAgendaButton.setText("Show Agenda");
		ShowAgendaButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ShowAgendaButtonActionPerformed(evt);
			}
		});

		jButtonLoad.setText("Load");
		jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonLoadActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout panelOpcionesLayout = new javax.swing.GroupLayout(panelOpciones);
		panelOpciones.setLayout(panelOpcionesLayout);
		panelOpcionesLayout.setHorizontalGroup(
				panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(separador)
				.addGroup(panelOpcionesLayout.createSequentialGroup()
						.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(panelOpcionesLayout.createSequentialGroup()
										.addGap(57, 57, 57)
										.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(ShowAgendaButton, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
												.addComponent(showRulesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addComponent(showFactsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
												.addGroup(panelOpcionesLayout.createSequentialGroup()
														.addGap(70, 70, 70)
														.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
																.addComponent(botonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addComponent(jButtonLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
																.addGroup(panelOpcionesLayout.createSequentialGroup()
																		.addGap(55, 55, 55)
																		.addComponent(tituloOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
																		.addContainerGap(43, Short.MAX_VALUE))
				);
		panelOpcionesLayout.setVerticalGroup(
				panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelOpcionesLayout.createSequentialGroup()
						.addGap(31, 31, 31)
						.addComponent(tituloOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(56, 56, 56)
						.addComponent(jButtonLoad)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(botonRun)
						.addGap(18, 18, 18)
						.addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(showFactsButton)
						.addGap(11, 11, 11)
						.addComponent(showRulesButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(ShowAgendaButton)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);

		menuFile.setText("File");

		menuLoadFile.setText("Load ECG File...   Ctrl+L");
		menuLoadFile.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuLoadFileActionPerformed(evt);
			}
		});
		menuFile.add(menuLoadFile);

		menuRun.setText("Run...                      Crtl+R");
		menuRun.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuRunActionPerformed(evt);
			}
		});
		menuFile.add(menuRun);
		menuFile.add(separadorLoadExit);

		menuExit.setText("Exit");
		menuExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuExitActionPerformed(evt);
			}
		});
		menuFile.add(menuExit);

		barraMenu.add(menuFile);

		menuOther.setText("Other");

		jMenuLanguage.setText("Language");

		jRadioButtonMenuItemEnglish.setSelected(true);
		jRadioButtonMenuItemEnglish.setText("English");
		jRadioButtonMenuItemEnglish.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/english.png"))); // NOI18N
		jRadioButtonMenuItemEnglish.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButtonMenuItemEnglishActionPerformed(evt);
			}
		});
		jMenuLanguage.add(jRadioButtonMenuItemEnglish);

		jRadioButtonMenuItemEspañol.setSelected(true);
		jRadioButtonMenuItemEspañol.setText("Español");
		jRadioButtonMenuItemEspañol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/spanish.png"))); // NOI18N
		jRadioButtonMenuItemEspañol.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButtonMenuItemEspañolActionPerformed(evt);
			}
		});
		jMenuLanguage.add(jRadioButtonMenuItemEspañol);

		menuOther.add(jMenuLanguage);

		menuHelp.setText("Help");
		menuHelp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuHelpActionPerformed(evt);
			}
		});
		menuOther.add(menuHelp);

		menuAbout.setText("About");
		menuAbout.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuAboutActionPerformed(evt);
			}
		});
		menuOther.add(menuAbout);

		barraMenu.add(menuOther);

		setJMenuBar(barraMenu);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addComponent(panelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(panelDiagnostico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(panelDiagnostico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addComponent(panelOpciones, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);

		pack();
	}                        

	/**
	 * Accion para el boton de abrir fichero que llama al metodo del controlador
	 * que lo maneja
	 *
	 * @param evt El evento click en el menu abrir fichero
	 */
	private void menuLoadFileActionPerformed(java.awt.event.ActionEvent evt) {                                             
		menuLoad();
	}                                            
	/**
	 * Metodo que carga un fichero de nuestro ordenador para ser analizado
	 */
	private void menuLoad() {
		String mensaje;
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			mensaje = Engine.getUnicaInstancia().loadFile(0);
		} else {
			mensaje = Engine.getUnicaInstancia().loadFile(1);
		}
		textoInfo.setText("");
		textoHeartRate.setText("");
		textoTotalCiclos.setText("");
		if (mensaje.equals("")) {
			if (jRadioButtonMenuItemEnglish.isSelected()) {
				JOptionPane.showMessageDialog(new JDialog(),
						"The ECG file was loaded.",
						"OK", JOptionPane.DEFAULT_OPTION);
			} else {
				JOptionPane.showMessageDialog(new JDialog(),
						"Fichero ECG cargado con éxito.",
						"OK", JOptionPane.DEFAULT_OPTION);
			}
		} else if (!mensaje.equals("noFile")) {
			if (jRadioButtonMenuItemEnglish.isSelected()) {
				JOptionPane.showMessageDialog(new JDialog(),
						mensaje + "\nFile not loaded.",
						"Warning", JOptionPane.DEFAULT_OPTION);
			} else {
				JOptionPane.showMessageDialog(new JDialog(),
						mensaje + "\nFichero no cargado.",
						"Error", JOptionPane.DEFAULT_OPTION);
			}
		}
	}

	/**
	 * Metodo para cerrar la ventana
	 *
	 * @param evt Evento click sobre cerrar
	 */
	private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {                                         
		this.dispose();
	}                                        

	/**
	 * Metodo para mostrar las reglas
	 *
	 * @param evt Click en el boton mostrar reglas
	 */
	private void showRulesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
		Engine.getUnicaInstancia().showRules(textoInfo);
	}                                               
	/**
	 * Metodo para mostrar la agenda
	 *
	 * @param evt Click en el boton agenda
	 */
	private void ShowAgendaButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			Engine.getUnicaInstancia().showAgenda(textoInfo, 0);
		} else {
			Engine.getUnicaInstancia().showAgenda(textoInfo, 1);
		}
	}                                                
	/**
	 * Metodo que muestra la informacion que nuestro sistema ha sido capaz de
	 * inferir por pantalla
	 *
	 * @param evt Click al boton run
	 */
	private void botonRunActionPerformed(java.awt.event.ActionEvent evt) {                                         
		ejecutar();
	}                                        
	/**
	 * Metodo que muestra la ventana para seleccionar un fichero
	 *
	 * @param evt Evento que se produce al hacer click en load
	 */
	private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {                                            
		menuLoad();
	}                                           
	/**
	 * Metodo que ejecuta el rete al pulsar el boton run
	 *
	 * @param evt Evento click sobre el boton run
	 */
	private void menuRunActionPerformed(java.awt.event.ActionEvent evt) {                                        
		ejecutar();
	}                                       
	/**
	 * Metodo que muestra la informacion al pulsar about
	 *
	 * @param evt Evento click sobre la opcion de menu about
	 */
	private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {                                          
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			JOptionPane.showMessageDialog(new JDialog(),
					"Alarm System - Electrocardiogram\nAuthors:\n  Alberto Lopez\n  Adrian Martinez\n  Tony Wang",
					"About", JOptionPane.DEFAULT_OPTION);
		} else {
			JOptionPane.showMessageDialog(new JDialog(),
					"Sistema de Alarmas - Electrocardiograma\nAutores:\n  Alberto López\n  Adrián Martínez\n  Tony Wang",
					"Acerca De", JOptionPane.DEFAULT_OPTION);
		}
	}                                         

	/**
	 * Metodo que muestra los hechos de la base de hechos al pulsar el boton
	 * show facts
	 *
	 * @param evt El evento click sobre el boton show facts
	 */
	private void showFactsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
		Engine.getUnicaInstancia().showFacts(textoInfo);
	}                                               
	/**
	 * Metodo que muestra por pantalla la ayuda del programa
	 *
	 * @param evt Evento click sobre el boton help
	 */
	private void menuHelpActionPerformed(java.awt.event.ActionEvent evt) {                                         
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			JOptionPane.showMessageDialog(new JDialog(),
					"From the main window of the application you have the following options:\n"
							+ "  - Load (CTRL+L): Loads a .ecg file\n"
							+ "  - Run (CTRL+R): Executes the system with the input data from the loaded file\n"
							+ "  - Show Facts: Shows the facts from the working memory\n"
							+ "  - Show Rules: Shows the rules from the knowledge base\n"
							+ "  - Show Agenda: Shows the rules that can be fired"
							+ "  - The results will be shown at the center of the window. You will be able to load and run another file.",
							"Help", JOptionPane.DEFAULT_OPTION);
		} else {
			JOptionPane.showMessageDialog(new JDialog(),
					"En la ventana principal de la aplicación tienes las siguientes opciones:\n"
							+ "  - Cargar (CTRL+L): Carga un archivo .ecg\n"
							+ "  - Ejecutar (CTRL+R): Ejecuta el sistema con los datos cargados del archivo ECG\n"
							+ "  - Mostrar Hechos: Muestra los hechos de la base de hechos\n"
							+ "  - Mostrar Reglas: Muestra las reglas de la base de conocimiento\n"
							+ "  - Mostrar Agenda: Muestra las reglas activas que se pueden disparar"
							+ "  - Los resultados serán mostrados en el centro de la ventana. Posteriormente podrás cargar y ejecutar otro archivo.",
							"Ayuda", JOptionPane.DEFAULT_OPTION);
		}
	}                                        

	/**
	 * Metodo que cambia el idioma de la vista a ingles
	 *
	 * @param evt Evento de click sobre el boton de idioma ingles
	 */
	private void jRadioButtonMenuItemEnglishActionPerformed(java.awt.event.ActionEvent evt) {                                                            
		establecerIdioma();
	}                                                           

	/**
	 * Metodo que cambia el idioma de la vista a español
	 *
	 * @param evt Evento de click sobre el boton de idioma español
	 */
	private void jRadioButtonMenuItemEspañolActionPerformed(java.awt.event.ActionEvent evt) {                                                            
		establecerIdioma();
	}                                                           

	/**
	 * Metodo que contiene la serie de instrucciones que se realizan al darle a
	 * ejecutar o usar CTRL+R
	 */
	private void ejecutar() {
		Engine.getUnicaInstancia().run();

		if (jRadioButtonMenuItemEnglish.isSelected()) {
            Engine.getUnicaInstancia().rellenarDiagnostico(textoInfo, 0);
        } else {
            Engine.getUnicaInstancia().rellenarDiagnostico(textoInfo, 1);
        }
        Engine.getUnicaInstancia().rellenarCiclos(textoTotalCiclos);
        Engine.getUnicaInstancia().rellenarBPM(textoHeartRate);
		 
	}

	// Variables declaration - do not modify                     
	private javax.swing.JButton ShowAgendaButton;
	private javax.swing.JMenuBar barraMenu;
	private javax.swing.JButton botonRun;
	private javax.swing.JScrollPane contenidoInfo;
	private javax.swing.JButton jButtonLoad;
	private javax.swing.JLabel jLabelVersion;
	private javax.swing.JMenu jMenuLanguage;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemEnglish;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemEspañol;
	private javax.swing.JMenuItem menuAbout;
	private javax.swing.JMenuItem menuExit;
	private javax.swing.JMenu menuFile;
	private javax.swing.JMenuItem menuHelp;
	private javax.swing.JMenuItem menuLoadFile;
	private javax.swing.JMenu menuOther;
	private javax.swing.JMenuItem menuRun;
	private javax.swing.JPanel panelDiagnostico;
	private javax.swing.JPanel panelOpciones;
	private javax.swing.JSeparator separador;
	private javax.swing.JPopupMenu.Separator separadorLoadExit;
	private javax.swing.JButton showFactsButton;
	private javax.swing.JButton showRulesButton;
	private javax.swing.JTextField textoHeartRate;
	private javax.swing.JTextArea textoInfo;
	private javax.swing.JTextField textoTotalCiclos;
	private javax.swing.JLabel tituloHeartRate;
	private javax.swing.JLabel tituloInformation;
	private javax.swing.JLabel tituloOpciones;
	private javax.swing.JLabel tituloTotalCiclos;
	// End of variables declaration                   
	private final ButtonGroup grupoIdiomas = new ButtonGroup();

	/**
	 * Metodo para inicializar componentes de la vista
	 */
	private void inicializarComponentes() {
		grupoIdiomas.add(jRadioButtonMenuItemEnglish);
		grupoIdiomas.add(jRadioButtonMenuItemEspañol);
	}

	/**
	 * Clase privada para implementar los atajos de teclado
	 */
	private class MyDispatcher implements KeyEventDispatcher {

		@Override
		public boolean dispatchKeyEvent(KeyEvent evt) {
			if (evt.isControlDown() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_L) {
				menuLoad();
			} else if (evt.isControlDown() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_R) {
				ejecutar();
			}
			return false;
		}
	}

	/**
	 * Metodo que desactiva el foco de los JButton.
	 */
	private void disableComponentFocus() {
		jButtonLoad.setFocusable(false);
		botonRun.setFocusable(false);
		ShowAgendaButton.setFocusable(false);
		showFactsButton.setFocusable(false);
		showRulesButton.setFocusable(false);
	}

	/**
	 * Metodo que crea un Event Dispacher para atender a los eventos generados
	 * por teclado.
	 */
	private void createEventDispacher() {
		KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
		manager.addKeyEventDispatcher(new MyDispatcher());
	}

	/**
	 * Metodo para establecer el idioma de la aplicion
	 */
	private void establecerIdioma() {
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			setTitle("ECG Analyzer");
			ShowAgendaButton.setText(" Show Agenda ");
			menuRun.setText("Run...                     Ctrl+R");
			menuLoadFile.setText("Load ECG File...  Ctrl+L");
			jLabelVersion.setText("Version 1.0");
			jMenuLanguage.setText("Language");
			botonRun.setText("Run");
			menuAbout.setText("About");
			menuExit.setText("Exit");
			menuFile.setText("File");
			menuHelp.setText("Help");
			jButtonLoad.setText("Load");
			menuOther.setText("Other");
			showFactsButton.setText(" Show Facts ");
			showRulesButton.setText(" Show Rules ");
			tituloOpciones.setText("Options");
			tituloInformation.setText("ECG Information");
			tituloHeartRate.setText("Heart Rate");
			tituloTotalCiclos.setText("Total Cycles");
		} else {
			setTitle("Analizador de ECG");
			ShowAgendaButton.setText("Mostrar Agenda");
			menuRun.setText("Ejecutar...                       Ctrl+R");
			menuLoadFile.setText("Cargar archivo ECG...  Ctrl+L");
			jLabelVersion.setText("Versión 1.0");
			jMenuLanguage.setText("Idioma");
			botonRun.setText("Ejecutar");
			menuAbout.setText("Acerca de");
			menuExit.setText("Salir");
			menuFile.setText("Archivo");
			menuHelp.setText("Ayuda");
			jButtonLoad.setText("Cargar");
			menuOther.setText("Otros");
			showFactsButton.setText("Mostrar Hechos");
			showRulesButton.setText("Mostrar Reglas");
			tituloOpciones.setText("Opciones");
			tituloInformation.setText("Información del ECG");
			tituloHeartRate.setText("Ritmo Cardíado");
			tituloTotalCiclos.setText("Ciclos Totales");
		}
	}
}
