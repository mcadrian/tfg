package view;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import controller.Engine;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import javax.swing.ButtonGroup;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 * Ventana principal de la aplicacion. Contiene la clase main y las opciones de
 * inicio. Realmente sirve para cargar el fichero y tener otra ventana donde se
 * muestra la informacion
 *
 * @author ALADTO
 */
@SuppressWarnings("serial")
public class MainWindow extends javax.swing.JFrame {

	// variables para controlar que no se haga un run si no se cargo el fichero
	private boolean load = true;
	private boolean error = true;

	/**
	 * Creates new form PantallaInicial
	 */
	public MainWindow() {
		initComponents();
		inicializarComponentes();
		establecerIdioma();
		disableComponentFocus();
		createEventDispacher();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */                         
	private void initComponents() {

		panelOpciones = new javax.swing.JPanel();
		tituloOpciones = new javax.swing.JLabel();
		showFactsButton = new javax.swing.JButton();
		botonRun = new javax.swing.JButton();
		showRulesButton = new javax.swing.JButton();
		ShowAgendaButton = new javax.swing.JButton();
		jButtonLoad = new javax.swing.JButton();
		jLabelVersion = new javax.swing.JLabel();
		separador = new javax.swing.JSeparator();
		barraMenu = new javax.swing.JMenuBar();
		menuFile = new javax.swing.JMenu();
		menuLoadFile = new javax.swing.JMenuItem();
		jMenuRun = new javax.swing.JMenuItem();
		separadorLoadExit = new javax.swing.JPopupMenu.Separator();
		menuExit = new javax.swing.JMenuItem();
		menuOther = new javax.swing.JMenu();
		jMenuLanguage = new javax.swing.JMenu();
		jRadioButtonMenuItemEnglish = new javax.swing.JRadioButtonMenuItem();
		jRadioButtonMenuItemEspañol = new javax.swing.JRadioButtonMenuItem();
		menuHelp = new javax.swing.JMenuItem();
		menuAbout = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("ECG Analyzer");
		setMaximumSize(new java.awt.Dimension(0, 0));
		setResizable(false);

		panelOpciones.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		tituloOpciones.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
		tituloOpciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		tituloOpciones.setText("Options");

		showFactsButton.setText("Show Facts");
		showFactsButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showFactsButtonActionPerformed(evt);
			}
		});

		botonRun.setText("Run");
		botonRun.setPreferredSize(null);
		botonRun.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				botonRunActionPerformed(evt);
			}
		});

		showRulesButton.setText("Show Rules");
		showRulesButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showRulesButtonActionPerformed(evt);
			}
		});

		ShowAgendaButton.setText("Show Agenda");
		ShowAgendaButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ShowAgendaButtonActionPerformed(evt);
			}
		});

		jButtonLoad.setText("Load");
		jButtonLoad.setPreferredSize(null);
		jButtonLoad.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonLoadActionPerformed(evt);
			}
		});

		jLabelVersion.setText("Version 1.0");

		javax.swing.GroupLayout panelOpcionesLayout = new javax.swing.GroupLayout(panelOpciones);
		panelOpciones.setLayout(panelOpcionesLayout);
		panelOpcionesLayout.setHorizontalGroup(
				panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(separador)
				.addGroup(panelOpcionesLayout.createSequentialGroup()
						.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOpcionesLayout.createSequentialGroup()
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jLabelVersion))
										.addGroup(panelOpcionesLayout.createSequentialGroup()
												.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(panelOpcionesLayout.createSequentialGroup()
																.addGap(60, 60, 60)
																.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																		.addComponent(ShowAgendaButton, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
																		.addComponent(showRulesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																		.addComponent(showFactsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
																		.addGroup(panelOpcionesLayout.createSequentialGroup()
																				.addGap(68, 68, 68)
																				.addComponent(tituloOpciones)))
																				.addGap(0, 48, Short.MAX_VALUE)))
																				.addContainerGap())
																				.addGroup(panelOpcionesLayout.createSequentialGroup()
																						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																						.addGroup(panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																								.addComponent(jButtonLoad, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
																								.addComponent(botonRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				);
		panelOpcionesLayout.setVerticalGroup(
				panelOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(panelOpcionesLayout.createSequentialGroup()
						.addGap(26, 26, 26)
						.addComponent(tituloOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(49, 49, 49)
						.addComponent(jButtonLoad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(botonRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(21, 21, 21)
						.addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(11, 11, 11)
						.addComponent(showFactsButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(showRulesButton)
						.addGap(11, 11, 11)
						.addComponent(ShowAgendaButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
						.addComponent(jLabelVersion)
						.addContainerGap())
				);

		menuFile.setText("File");

		menuLoadFile.setText("Load ECG File...   Ctrl+L");
		menuLoadFile.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuLoadFileActionPerformed(evt);
			}
		});
		menuFile.add(menuLoadFile);

		jMenuRun.setText("Run...                      Crtl+R");
		jMenuRun.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuRunActionPerformed(evt);
			}
		});
		menuFile.add(jMenuRun);
		menuFile.add(separadorLoadExit);

		menuExit.setText("Exit");
		menuExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuExitActionPerformed(evt);
			}
		});
		menuFile.add(menuExit);

		barraMenu.add(menuFile);

		menuOther.setText("Other");

		jMenuLanguage.setText("Language");

		jRadioButtonMenuItemEnglish.setSelected(true);
		jRadioButtonMenuItemEnglish.setText("English");
		jRadioButtonMenuItemEnglish.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/english.png"))); // NOI18N
		jRadioButtonMenuItemEnglish.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButtonMenuItemEnglishActionPerformed(evt);
			}
		});
		jMenuLanguage.add(jRadioButtonMenuItemEnglish);

		jRadioButtonMenuItemEspañol.setSelected(true);
		jRadioButtonMenuItemEspañol.setText("Español");
		jRadioButtonMenuItemEspañol.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/spanish.png"))); // NOI18N
		jRadioButtonMenuItemEspañol.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButtonMenuItemEspañolActionPerformed(evt);
			}
		});
		jMenuLanguage.add(jRadioButtonMenuItemEspañol);

		menuOther.add(jMenuLanguage);

		menuHelp.setText("Help");
		menuHelp.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuHelpActionPerformed(evt);
			}
		});
		menuOther.add(menuHelp);

		menuAbout.setText("About");
		menuAbout.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuAboutActionPerformed(evt);
			}
		});
		menuOther.add(menuAbout);

		barraMenu.add(menuOther);

		setJMenuBar(barraMenu);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(panelOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(panelOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				);

		pack();
	}// </editor-fold>                        

	/**
	 * Accion para el boton de abrir fichero que llama al metodo del controlador
	 * que lo maneja
	 *
	 * @param evt El evento click en el menu abrir fichero
	 */
	private void menuLoadFileActionPerformed(java.awt.event.ActionEvent evt) {                                             
		menuLoad();
	}                                            

	/**
	 * Metodo para cerrar la ventana
	 *
	 * @param evt Evento click sobre cerrar
	 */
	private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {                                         
		this.dispose();
	}                                        

	/**
	 * Metodo para mostrar las reglas
	 *
	 * @param evt Click en el boton mostrar reglas
	 */
	private void showRulesButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
		mostrarError();
	}                                               
	/**
	 * Metodo para mostrar la agenda
	 *
	 * @param evt Click en el boton agenda
	 */
	private void ShowAgendaButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
		mostrarError();
	}                                                
	/**
	 * Metodo que muestra la informacion que nuestro sistema ha sido capaz de
	 * inferir por pantalla
	 *
	 * @param evt Click al boton run
	 */
	private void botonRunActionPerformed(java.awt.event.ActionEvent evt) {                                         
		mostrarError();
	}                                        
	/**
	 * Metodo que muestra la ventana de carga del fichero al pulsar el boton de
	 * cargar
	 *
	 * @param evt El evento de click sobre el boton
	 */
	private void jButtonLoadActionPerformed(java.awt.event.ActionEvent evt) {                                            
		menuLoad();
	}                                           
	/**
	 * Metodo que ejecuta el fichero cargado al darle a run. Si no se ha cargado
	 * aun muestra un error
	 *
	 * @param evt Evento click sobre el boton de run
	 */
	private void jMenuRunActionPerformed(java.awt.event.ActionEvent evt) {                                         
		mostrarError();
	}                                        
	/**
	 * Metodo para mostrar por pantalla la informacion del about
	 *
	 * @param evt Evento que captura al clickear sobre el menu about
	 */
	private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {                                          
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			JOptionPane.showMessageDialog(new JDialog(),
					"Alarm System - Electrocardiogram\nAuthors:\n  Alberto Lopez\n  Adrian Martinez\n  Tony Wang",
					"About", JOptionPane.DEFAULT_OPTION);
		} else {
			JOptionPane.showMessageDialog(new JDialog(),
					"Sistema de Alarmas - Electrocardiograma\nAutores:\n  Alberto López\n  Adrián Martínez\n  Tony Wang",
					"Acerca De", JOptionPane.DEFAULT_OPTION);
		}
	}                                         
	/**
	 * Metodo que muestra los facts de la base de hechos en caso de que el
	 * fichero estuviera cargado
	 *
	 * @param evt Evento de click sobre el boton show facts
	 */
	private void showFactsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
		mostrarError();   
	}                                               

	/**
	 * Metodo que muestra por pantalla la ayuda del programa
	 *
	 * @param evt Evento click sobre el boton help
	 */
	private void menuHelpActionPerformed(java.awt.event.ActionEvent evt) {                                         
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			JOptionPane.showMessageDialog(new JDialog(),
					"From the main window of the application you have the following options:\n"
							+ "  - Load (CTRL+L): Loads a .ecg file\n"
							+ "  - Run (CTRL+R): Executes the system with the input data from the loaded file\n"
							+ "  - Show Facts: Shows the facts from the working memory\n"
							+ "  - Show Rules: Shows the rules from the knowledge base\n"
							+ "  - Show Agenda: Shows the rules that can be fired"
							+ "  - The results will be shown at the center of the window. You will be able to load and run another file.",
							"Help", JOptionPane.DEFAULT_OPTION);
		} else {
			JOptionPane.showMessageDialog(new JDialog(),
					"En la ventana principal de la aplicación tienes las siguientes opciones:\n"
							+ "  - Cargar (CTRL+L): Carga un archivo .ecg\n"
							+ "  - Ejecutar (CTRL+R): Ejecuta el sistema con los datos cargados del archivo ECG\n"
							+ "  - Mostrar Hechos: Muestra los hechos de la base de hechos\n"
							+ "  - Mostrar Reglas: Muestra las reglas de la base de conocimiento\n"
							+ "  - Mostrar Agenda: Muestra las reglas activas que se pueden disparar"
							+ "  - Los resultados serán mostrados en el centro de la ventana. Posteriormente podrás cargar y ejecutar otro archivo.",
							"Ayuda", JOptionPane.DEFAULT_OPTION);
		}
	}                                        

	/**
	 * Metodo que cambia el idioma de la vista a español
	 *
	 * @param evt Evento de click sobre el boton de idioma español
	 */
	private void jRadioButtonMenuItemEspañolActionPerformed(java.awt.event.ActionEvent evt) {                                                            
		establecerIdioma();
	}                                                           

	/**
	 * Metodo que cambia el idioma de la vista a ingles
	 *
	 * @param evt Evento de click sobre el boton de idioma ingles
	 */
	private void jRadioButtonMenuItemEnglishActionPerformed(java.awt.event.ActionEvent evt) {                                                            
		establecerIdioma();
	}                                                           

	/**
	 * Metodo que contiene la serie de instrucciones que se realizan al darle a
	 * ejecutar o usar CTRL+R
	 */
	private void mostrarError() {
		if (error && load) {
			error = false;
			if (jRadioButtonMenuItemEnglish.isSelected()) {
				JOptionPane.showMessageDialog(new JDialog(),
						"You must load an ECG file.",
						"Warning", JOptionPane.DEFAULT_OPTION);
			} else {
				JOptionPane.showMessageDialog(new JDialog(),
						"Debes cargar un fichero ECG.",
						"Precaución", JOptionPane.DEFAULT_OPTION);
			}
			// error se usa para que cuando este la ventana de error activa no podemos usar la combinacion de teclas
			error = true;
		}
	}

	/**
	 * Programa principal
	 *
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(SecondWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				MainWindow ventana = new MainWindow();
				ventana.setVisible(true);
				ventana.setLocationRelativeTo(null);
			}
		});
	}


	// Variables declaration - do not modify                     
	private javax.swing.JButton ShowAgendaButton;
	private javax.swing.JMenuBar barraMenu;
	private javax.swing.JButton botonRun;
	private javax.swing.JButton jButtonLoad;
	private javax.swing.JLabel jLabelVersion;
	private javax.swing.JMenu jMenuLanguage;
	private javax.swing.JMenuItem jMenuRun;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemEnglish;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemEspañol;
	private javax.swing.JMenuItem menuAbout;
	private javax.swing.JMenuItem menuExit;
	private javax.swing.JMenu menuFile;
	private javax.swing.JMenuItem menuHelp;
	private javax.swing.JMenuItem menuLoadFile;
	private javax.swing.JMenu menuOther;
	private javax.swing.JPanel panelOpciones;
	private javax.swing.JSeparator separador;
	private javax.swing.JPopupMenu.Separator separadorLoadExit;
	private javax.swing.JButton showFactsButton;
	private javax.swing.JButton showRulesButton;
	private javax.swing.JLabel tituloOpciones;
	// End of variables declaration                   
	// Grupo de botones para elegir idioma
	private final ButtonGroup grupoIdiomas = new ButtonGroup();

	/**
	 * Metodo para inicializar componentes de la vista
	 */
	private void inicializarComponentes() {
		grupoIdiomas.add(jRadioButtonMenuItemEnglish);
		grupoIdiomas.add(jRadioButtonMenuItemEspañol);
	}

	/**
	 * Metodo para establecer el idioma de la aplicion
	 */
	private void establecerIdioma() {
		if (jRadioButtonMenuItemEnglish.isSelected()) {
			setTitle("ECG Analyzer");
			ShowAgendaButton.setText("Show Agenda");
			jMenuRun.setText("Run...                     Ctrl+R");
			menuLoadFile.setText("Load ECG File...  Ctrl+L");
			jLabelVersion.setText("Version 1.0");
			jMenuLanguage.setText("Language");
			botonRun.setText("Run");
			menuAbout.setText("About");
			menuExit.setText("Exit");
			menuFile.setText("File");
			menuHelp.setText("Help");
			jButtonLoad.setText("Load");
			menuOther.setText("Other");
			showFactsButton.setText("Show Facts");
			showRulesButton.setText("Show Rules");
			tituloOpciones.setText("Options");
		} else {
			setTitle("Analizador de ECG");
			ShowAgendaButton.setText("Mostrar Agenda");
			jMenuRun.setText("Ejecutar...                       Ctrl+R");
			menuLoadFile.setText("Cargar archivo ECG...  Ctrl+L");
			jLabelVersion.setText("Versión 1.0");
			jMenuLanguage.setText("Idioma");
			botonRun.setText("Ejecutar");
			menuAbout.setText("Acerca de");
			menuExit.setText("Salir");
			menuFile.setText("Archivo");
			menuHelp.setText("Ayuda");
			jButtonLoad.setText("Cargar");
			menuOther.setText("Otros");
			showFactsButton.setText("Mostrar Hechos");
			showRulesButton.setText("Mostrar Reglas");
			tituloOpciones.setText("Opciones");
		}
	}

	/**
	 * Clase privada para implementar los atajos de teclado
	 */
	private class MyDispatcher implements KeyEventDispatcher {

		@Override
		public boolean dispatchKeyEvent(KeyEvent evt) {
			if (evt.isControlDown() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_L) {
				menuLoad();
			} else if (evt.isControlDown() && evt.getKeyCode() == java.awt.event.KeyEvent.VK_R) {
				mostrarError();
			}
			return false;
		}
	}

	/**
	 * Metodo que desactiva el foco de los JButton.
	 */
	private void disableComponentFocus() {
		jButtonLoad.setFocusable(false);
		botonRun.setFocusable(false);
		ShowAgendaButton.setFocusable(false);
		showFactsButton.setFocusable(false);
		showRulesButton.setFocusable(false);
	}

	/**
	 * Metodo que crea un Event Dispacher para atender a los eventos generados
	 * por teclado.
	 */
	private void createEventDispacher() {
		KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
		manager.addKeyEventDispatcher(new MyDispatcher());
	}

	/**
	 * Metodo que se encarga de cargar la segunda ventana en caso de que se haya
	 * cargado correctamente el fichero
	 */
	private void menuLoad() {
		if (load) {
			load = false;
			error = false;
			String string;
			if (jRadioButtonMenuItemEnglish.isSelected()) {
				string = Engine.getUnicaInstancia().loadFile(0);
			} else {
				string = Engine.getUnicaInstancia().loadFile(1);
			}
			if (string.equals("")) {
				if (jRadioButtonMenuItemEnglish.isSelected()) {
					JOptionPane.showMessageDialog(new JDialog(),
							"The ECG file was loaded.",
							"OK", JOptionPane.DEFAULT_OPTION);
				} else {
					JOptionPane.showMessageDialog(new JDialog(),
							"El archivo ECG fue cargado.",
							"OK", JOptionPane.DEFAULT_OPTION);
				}
				this.dispose();
				SecondWindow ventana;
				if (jRadioButtonMenuItemEnglish.isSelected()) {
					ventana = new SecondWindow(0);
				} else {
					ventana = new SecondWindow(1);
				}
				ventana.setVisible(true);
				ventana.setLocationRelativeTo(null);

			} else if (!string.equals("noFile")) {
				if (jRadioButtonMenuItemEnglish.isSelected()) {
					JOptionPane.showMessageDialog(new JDialog(),
							string + "\nFile not loaded.",
							"Warning", JOptionPane.DEFAULT_OPTION);
				} else {
					JOptionPane.showMessageDialog(new JDialog(),
							string + "\nFichero no cargado.",
							"Error", JOptionPane.DEFAULT_OPTION);
				}
				load = true;
				error = true;
			} else {
				load = true;
				error = true;
			}
		}
	}
}
